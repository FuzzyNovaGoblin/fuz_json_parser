var searchIndex = JSON.parse('{\
"fuz_json_parser":{"doc":"","i":[[0,"json_parser","fuz_json_parser","",null,null],[0,"states","fuz_json_parser::json_parser","",null,null],[4,"BlockType","fuz_json_parser::json_parser::states","",null,null],[13,"Array","","",0,null],[13,"Object","","",0,null],[4,"InQuotes","","",null,null],[13,"False","","",1,null],[13,"Single","","",1,null],[13,"Double","","",1,null],[11,"is_insided","","",1,[[],["bool",15]]],[11,"_matches_corisponding","","",1,[[["char",15]],["bool",15]]],[6,"Result","fuz_json_parser::json_parser","",null,null],[5,"parse","","the main parsing method entry point returns the parsed …",null,[[],[["string",3],["result",4],["jsonvalue",4]]]],[5,"main_parse","","the recursive main section of the parsing algorithm given …",null,[[],[["string",3],["result",4],["jsonvalue",4]]]],[5,"parse_block","","parses a block of the json string the block is either an …",null,[[["blocktype",4]],[["string",3],["result",4],["jsonvalue",4]]]],[5,"parse_key_pair","","parse a key value pair from <code>AsRef<str></code> parse out the …",null,[[["usize",15]],[["string",3],["result",4],["jsonvalue",4]]]],[5,"parse_single_value","","parse a single value from an <code>AsRef<str></code> to <code>JsonValue</code>",null,[[],[["string",3],["result",4],["jsonvalue",4]]]],[0,"values","fuz_json_parser","",null,null],[4,"JsonNum","fuz_json_parser::values","",null,null],[13,"Int","","",2,null],[13,"Float","","",2,null],[4,"JsonValue","","",null,null],[13,"Null","","",3,null],[13,"Bool","","",3,null],[13,"Num","","",3,null],[13,"String","","",3,null],[13,"Array","","",3,null],[13,"Obj","","",3,null],[13,"KeyPair","","",3,null],[11,"unwrap_int","","use on <code>JsonValue::Num(JsonNum::Int)</code> to get value. will …",3,[[],["i128",15]]],[11,"unwrap_float","","use on <code>JsonValue::Num(JsonNum::Float)</code> to get value. will …",3,[[],["f64",15]]],[11,"unwrap_bool","","use on <code>JsonValue::Bool</code> to get value. will panic if used …",3,[[],["bool",15]]],[11,"unwrap_string","","use on <code>JsonValue::String</code> to get value. will panic if used …",3,[[],["str",15]]],[11,"unwrap_int","","use on <code>JsonNum::Int</code> to get value. will panic if used on …",2,[[],["i128",15]]],[11,"unwrap_float","","use on <code>JsonNum::Float</code> to get value. will panic if used on …",2,[[],["f64",15]]],[11,"from","fuz_json_parser::json_parser::states","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","fuz_json_parser::values","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"default","fuz_json_parser::json_parser::states","",1,[[]]],[11,"default","fuz_json_parser::values","gives the default <code>JsonValue</code> value which is <code>JsonValue::Null</code>",3,[[]]],[11,"fmt","fuz_json_parser::json_parser::states","",1,[[["formatter",3]],["result",6]]],[11,"fmt","fuz_json_parser::values","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"index","","use to index <code>JsonValue::Array</code> if used on any other type …",3,[[["usize",15]]]],[11,"index","","use to get value from <code>JsonValue::Obj</code> if used on any other …",3,[[["str",15]]]]],"p":[[4,"BlockType"],[4,"InQuotes"],[4,"JsonNum"],[4,"JsonValue"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);